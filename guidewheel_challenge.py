# -*- coding: utf-8 -*-
"""Guidewheel_Challenge.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k10Xv3a6tlRXNKT31mCyeyJHYDwOHrzj
"""

import pandas as pd
import json

# Function to safely parse JSON and extract Psum
def extract_psum(row):
    try:
        metrics = json.loads(row)
        return metrics.get('Psum', {}).get('avgvalue', pd.NA)
    except json.JSONDecodeError:
        return pd.NA

# Load the CSV data
df = pd.read_csv('/content/drive/MyDrive/demoPumpDayData.csv')

# Safely extract Psum values
df['Psum'] = df['metrics'].apply(extract_psum)

# Remove rows where Psum couldn't be extracted
df = df.dropna(subset=['Psum'])

# Calculate Operating Load
operating_load = df['Psum'].nlargest(10).mean()

# Step 3: Determine Machine States
def determine_state(psum, operating_load):
    if pd.isna(psum):
        return 'Off'
    elif 0 <= psum <= 0.1:
        return 'On - Unloaded'
    elif psum < 0.2 * operating_load:
        return 'On - Idle'
    else:
        return 'On - Loaded'

# Determine Machine States
df['State'] = df['Psum'].apply(lambda x: determine_state(x, operating_load))
# Convert 'fromts' from Unix timestamp (milliseconds) to datetime
df['fromts'] = pd.to_datetime(df['fromts'], unit='ms')

# Print the first few rows to verify
print(df[['fromts', 'Psum', 'State']].head(20))



# Now, exporting to JSON will include readable datetimes
df[['fromts', 'Psum', 'State']].to_json('Processed_machine_states.json', orient='records', date_format='iso', date_unit='ms')

print(df['State'])

import matplotlib.pyplot as plt

# Assuming 'fromts' is converted to a datetime format suitable for plotting
df['fromts'] = pd.to_datetime(df['fromts'], unit='ms')

plt.figure(figsize=(10, 6))
plt.plot(df['fromts'], df['State'], marker='o', linestyle='-', markersize=5)
plt.title('Machine State Over Time')
plt.xlabel('Time')
plt.ylabel('State')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()